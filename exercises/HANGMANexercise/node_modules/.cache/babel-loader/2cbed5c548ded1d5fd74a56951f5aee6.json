{"ast":null,"code":"var _jsxFileName = \"/Users/oliviergirardot/code/OGsoundFX/udemy-react-course/exercises/HANGMANexercise/src/Hangman.js\";\nimport React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\nimport { randomWord } from './words';\n\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n  constructor(props) {\n    super(props);\n    this.state = {\n      nWrong: 0,\n      guessed: new Set(),\n      answer: randomWord()\n    };\n    this.handleGuess = this.handleGuess.bind(this);\n    console.log(this.state.answer);\n  }\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n\n\n  guessedWord() {\n    return this.state.answer.split(\"\").map(ltr => this.state.guessed.has(ltr) ? ltr : \"_\");\n  }\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n\n\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n  /** generateButtons: return array of letter buttons to render */\n\n\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => /*#__PURE__*/React.createElement(\"button\", {\n      value: ltr,\n      onClick: this.handleGuess,\n      disabled: this.state.guessed.has(ltr),\n      key: ltr,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, ltr));\n  }\n  /** render: render game */\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Hangman\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }\n    }, \"Hangman\"), /*#__PURE__*/React.createElement(\"img\", {\n      src: this.state.nWrong >= this.props.maxWrong ? this.props.images[this.props.maxWrong] : this.props.images[this.state.nWrong],\n      alt: this.state.nWrong + ' wrong answers',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }\n    }, \"Number of wrong: \", this.state.nWrong >= this.props.maxWrong ? this.props.maxWrong : this.state.nWrong), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"Hangman-word\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }\n    }, this.state.nWrong >= this.props.maxWrong ? `You Lose` : this.guessedWord()), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"Hangman-btns\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }\n    }, this.state.nWrong < this.props.maxWrong ? this.generateButtons() : false));\n  }\n\n}\n\nHangman.defaultProps = {\n  maxWrong: 6,\n  images: [img0, img1, img2, img3, img4, img5, img6]\n};\nexport default Hangman;","map":{"version":3,"sources":["/Users/oliviergirardot/code/OGsoundFX/udemy-react-course/exercises/HANGMANexercise/src/Hangman.js"],"names":["React","Component","img0","img1","img2","img3","img4","img5","img6","randomWord","Hangman","constructor","props","state","nWrong","guessed","Set","answer","handleGuess","bind","console","log","guessedWord","split","map","ltr","has","evt","target","value","setState","st","add","includes","generateButtons","render","maxWrong","images","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Hangman.css\";\nimport img0 from \"./0.jpg\";\nimport img1 from \"./1.jpg\";\nimport img2 from \"./2.jpg\";\nimport img3 from \"./3.jpg\";\nimport img4 from \"./4.jpg\";\nimport img5 from \"./5.jpg\";\nimport img6 from \"./6.jpg\";\n\nimport { randomWord } from './words';\n\nclass Hangman extends Component {\n  /** by default, allow 6 guesses and use provided gallows images. */\n  static defaultProps = {\n    maxWrong: 6,\n    images: [img0, img1, img2, img3, img4, img5, img6]\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = { nWrong: 0, guessed: new Set(), answer: randomWord() };\n    this.handleGuess = this.handleGuess.bind(this);\n    console.log(this.state.answer)\n  }\n\n  /** guessedWord: show current-state of word:\n    if guessed letters are {a,p,e}, show \"app_e\" for \"apple\"\n  */\n  guessedWord() {\n    return this.state.answer\n      .split(\"\")\n      .map(ltr => (this.state.guessed.has(ltr) ? ltr : \"_\"));\n  }\n\n  /** handleGuest: handle a guessed letter:\n    - add to guessed letters\n    - if not in answer, increase number-wrong guesses\n  */\n  handleGuess(evt) {\n    let ltr = evt.target.value;\n    this.setState(st => ({\n      guessed: st.guessed.add(ltr),\n      nWrong: st.nWrong + (st.answer.includes(ltr) ? 0 : 1)\n    }));\n  }\n\n  /** generateButtons: return array of letter buttons to render */\n  generateButtons() {\n    return \"abcdefghijklmnopqrstuvwxyz\".split(\"\").map(ltr => (\n      <button\n        value={ltr}\n        onClick={this.handleGuess}\n        disabled={this.state.guessed.has(ltr)}\n        key={ltr}\n      >\n        {ltr}\n      </button>\n    ));\n  }\n\n  /** render: render game */\n  render() {\n    return (\n      <div className='Hangman'>\n        <h1>Hangman</h1>\n        <img src={this.state.nWrong >= this.props.maxWrong ? this.props.images[this.props.maxWrong] : this.props.images[this.state.nWrong]} alt={this.state.nWrong + ' wrong answers'} />\n        <p>Number of wrong: {this.state.nWrong >= this.props.maxWrong ? this.props.maxWrong : this.state.nWrong }</p>\n        <p className='Hangman-word'>{ this.state.nWrong >= this.props.maxWrong ? `You Lose` : this.guessedWord()}</p>\n        <p className='Hangman-btns'>{ this.state.nWrong < this.props.maxWrong ? this.generateButtons() : false}</p>\n      </div>\n    );\n  }\n}\n\nexport default Hangman;\n"]},"metadata":{},"sourceType":"module"}